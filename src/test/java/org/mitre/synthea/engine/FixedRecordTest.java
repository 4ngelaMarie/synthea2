package org.mitre.synthea.engine;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mitre.synthea.TestHelper;
import org.mitre.synthea.engine.Generator;
import org.mitre.synthea.engine.Generator.GeneratorOptions;
import org.mitre.synthea.helpers.Config;
import org.mitre.synthea.input.RecordGroup;
import org.mitre.synthea.world.agents.Payer;
import org.mitre.synthea.world.agents.Person;
import org.mitre.synthea.world.agents.Provider;
import org.mitre.synthea.world.concepts.HealthRecord;
import org.mitre.synthea.world.geography.Location;

public class FixedRecordTest {

  // The generator.
  private static Generator generator;

  /**
   * Configure settings across these tests.
   * @throws Exception on test configuration loading errors.
   */
  @BeforeClass
  public static void setup() throws Exception {
    TestHelper.exportOff();
    //TestHelper.loadTestProperties();
    Generator.DEFAULT_STATE = "Colorado";
    Config.set("generate.only_dead_patients", "false"); 
    Config.set("exporter.split_records", "true");
  }

  /**
   * Configure each test.
   * @throws Exception on configuration error.
   */
  @Before
  public void before() throws Exception {
    Config.set("generate.only_dead_patients", "false");
    Provider.clear();
    Payer.clear();
  }

  @Test
  public void fixedDemographicsImportTest() {

      // Create a generator with the preset fixed demographics test file.
      GeneratorOptions go = new GeneratorOptions();
      go.fixedRecordPath = new File("fixed_demographics_test.json");
      go.state = "Colorado";
      go.population = 100;  // Setting to 100, but should be overrwritten by number of patients in input file.
      generator = new Generator(go);
      generator.internalStore = new LinkedList<>();
      List<RecordGroup> rawRecordGroups = generator.importFixedPatientDemographicsFile();

      // The list of people generated by the test with the fixed demographics record.
      List<Person> fixedPatients = new ArrayList<Person>();
      
      // Generate each patient from the fixed record input file.
      for (int i = 0; i < generator.options.population; i++) {
        final int index = i;
        // Generate the next person.
        fixedPatients.add(generator.generatePerson(index));
      }

      // Make sure that the correct number of people were imported from the fixed records.
      assertEquals(generator.internalStore.size(), 4);
      assertEquals(fixedPatients.size(), generator.internalStore.size());

      // Check that each person matches their fixed demographic records.
      for (Person person : generator.internalStore) {
        // Make sure the person has the correct number of records.
        assertEquals(person.records.size(), 3);
        // Cycle through the person's health records.
        for(HealthRecord record : person.records.values()){
          
          // NOTE: this checks record[2] because the person's name is equal to the final record in the list, even though the first should be the gold standard.
          assertEquals(person.attributes.get(Person.FIRST_NAME), rawRecordGroups.get(0).records.get(2).firstName);

          // *** For each of the person's records (even erroneous), make sure that the record matches with the fixed record input for:
          // Make sure each record has the correct record ID
          // Make sure each person has the correct surname
          
          // Make sure each person has the correct first name
          // Make sure each person has the correct birthdate
          // Make sure each person has the correct gender      
          // Make sure each person has the correct phone area code
          // Make sure each person has the correct phone number
          // Make sure each person has the correct address
          // Make sure each person has the correct city
          // Make sure each person has the correct zip code
          // Make sure each person has the correct parent1 surname
          // Make sure each person has the correct parent1 given name
          // Make sure each person has the correct parent1 email
          // Make sure each person has the correct number of records
          // Make sure each person has the correct number of providers

        }
      }
  }
  
}